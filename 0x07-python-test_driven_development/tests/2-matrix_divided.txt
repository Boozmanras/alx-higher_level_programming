# Test cases for matrix_divided function
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test normal division
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test matrix unchanged
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

# Test division by float
>>> print(matrix_divided(matrix, 2.5))
[[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

# Test division by negative
>>> print(matrix_divided(matrix, -3))
[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

# Test empty matrix
>>> matrix_divided([], 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test division by zero
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

# Test uneven rows
>>> matrix = [[1, 2, 3], [4, 5]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Test invalid matrix elements
>>> matrix = [[1, "2", 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats
